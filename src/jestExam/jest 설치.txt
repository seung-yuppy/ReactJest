# Jest 및 필수 패키지 설치
yarn add --dev jest @types/jest
yarn add --dev @testing-library/react @testing-library/jest-dom
yarn add --dev @babel/preset-env @babel/preset-react
yarn add --dev identity-obj-proxy

# Babel 관련 패키지
yarn add --dev babel-jest @babel/core

# React 테스팅 환경을 위한 패키지
yarn add --dev jest-environment-jsdom

앞서 봤던 테스트케이스를 작성시에는
반드시 원본을 먼저 쓸 필요는 없음
 - 컴포넌트를 테스트하고 싶다면 작성을 진행하지만 
   컴포넌트를 만들기 전에 테스트 해보는 것도 가능
jest를 만들 때에는 파일명.test.js와 같은 형태로 작성
yarn test
yarn test 파일명1, 파일명2, 파일명3

Jest Matcher
--> 결과 확인을 위한 메서드(이게 맞냐를 물어보는 메서드)

Matcher 함수들은 간단히 쓰건 길게 쓰건 결국 기대값이 t/f냐를 기준으로 두기 때문에 그 점만 잘 기억하면 됨!
--> 위에 코드 길게 쓰고

toEqual() : 객체 검증(왠만하면 이걸로 처리)
toBe() / toMatch() : 단순한 값을 비교할 때 / 정규표현식 기반의 비교
toBeDefined() : 변수 정의 여부 테스트
toBeTruthy() / toBeFalsy() : t / f 검증 
 --> 검증 대상의 참 거짓을 판별(JS의 특성상 true/false가 모든 값에 적용이 된다는 특징이 있음)
 --> 검증 대상의 정의를 제대로 정할 필요가 있음
 --> toBeTruthy는 검증대상이 규칙에 따라 true로 간주되면 테스트 통과
     toBeFalsy의 경우는 false로 간주될 때만 테스트 통과
toBeCalled() / toHaveBeenCalled() : 함수 호출 여부 확인
toHaveLength() / toContain() : 배열릐 길이 체크 / 특정 요소가 배열에 있는가 체크
 --> 대규모 서비스 구현시 유용
toThrow() : 예외 발생 여부 테스트
toHaveProperty() : 객체에 해당하는 key:value값이 있는지 확인
toBeCalledTimes() / toBeCalledWith() : 함수가 몇번 호출되었는지 검증 / 함수가 설정한 인자로 호출되었는지 검증
toReturn() / toHaveReturned() : 해당 함수가 오류없이 리턴되는가를 판단하는 테스트
toReturnWith() / toHaveReturnedWith(value) : 함수가 지정한 값 자체를 리턴하고 있는지 확인

모킹 : 테스트하고자 하는 코드가 의존하는 함수나 클래스등을 임시로 만들고 일단 구동가능하도록 작업을 진행하는 개념
  --> 근데 이거 필요함? 가짜 만들필요없이 진짜 불러와 테스트 하는게 더 낫지 않음?
      (테스트 하고 싶은 기능이 다른 기능들이랑 엮여 있다면 정확한 테스트가 힘든 경우도 있음)

테스트의 내용을 로그인 기능 구현이라 가정
  --> 해당 프로세스를 알고있을 필요가 있음

로그인 진행과정
1. 사용자가 id와 비밀번호를 입력
2. 서버가 해당 정보가 맞는지 아닌지를 판단
3. 맞으면 로그인 승인 / 틀리면 다시 입력하라 메세지를 리턴

로그인 진행과정을 테스트 하려면 필요한 것은?
  --> id/pw를 입력받아 post로 해당 내용을 요청하면 정보 추출후 DB에서 확인하는 테스트가 필요

그렇다면 여기서 우리가 mock 함수로 만들어서 처리해볼만한 내용은?
  --> 데이터를 조회할 때 실제로 DB에 접근해 조회하는 것이 아니라 조회한셈 치자라는 느낌
  --> 실제 사용자의 id, pw는 암호화 되어있을 가능성이 높음
  --> DB 연결상태에 따라 실제로 테스트는 실패할 수도 있음

이 테스트의 핵심은 '연결하셈 치고' 그리고 '입력했다 치고'
  --> 로직의 흐름과 성공 / 실패의 case를 예측하여 추후 개발에 도움을 주거나 혹은 발생할 에러들을 미리 확인할 수도 있음

mock을 활용한 개발을 요약해보면
1. 테스트할 함수안에 DB를 넣는 로직이 있다 가정
2. 우리가 테스트할 값 자체를 검증하려는건 아니니깐 사용자가 입력한 데이터는 우선 임의로 부여해도 상관없음
3. DB에 저장 혹은 접근하는 메서드는 mock으로 구현
4. 추후 리턴값을 DB에서 반환된 값을 직접 지정해주는 형식
5. 해당 리턴값을 통해 다른 부분들도 테스트

jest를 활용시 특히 개발자들이 많이 테스트 하는 부분
  - 비동기
  - 콜백, Promise, async/await

jest에서의 콜백 테스트
  - 비동기 메서드의 경우는 이벤트 루프 대문에 처리가 뒤로 밀리기 때문에 결과를 검증하기 위해 
    --> 콜백에 expect 메서드를 활용

비동기 방식을 테스트하는 과정을 사실 복잡하긴 하지만 잘만 익혀둔다면 중간중간 데이터의 흐름이나 혹은 상황 등을 캐치하기는 쉬워짐
